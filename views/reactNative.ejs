<div class="reveal">
	<div class="slides">

		<section>
			<h1>React Native实践与总结</h1>
			<h2>sky</h2>
		</section>

		<!-- S 大纲 -->
		<section>
			<h2>大纲</h2>
			<ul>
				<li>开发篇：组件分离</li>
				<ol>
					<li>组件</li>
					<li>样式</li>
				</ol>
				<li>布局篇：css-layout</li>
				<ol>
					<li>Flex布局</li>
					<li>图片布局</li>
				</ol>
				<li>思考篇</li>
				<ol>
					<li>ECMAScript 6 新特性</li>
					<li>ListView、ScrollView性能</li>
				</ol>
			</ul>
		</section>
		<!-- E 大纲 -->
		
		<!-- S 组件分离·组件 -->
		<section>
			<section data-transition="slide">
				<h3>组件分离·组件</h3>
				<p>相比传统的web开发，react-native的布局就是View、Text这两个标签，过多的嵌套会导致代码结构混乱，后续维护困难。举个栗子：</p>	
			</section>
			<section data-transition="slide">
				<pre><code data-trim contenteditable>
var jd = React.createClass({
	render : function () {
		return (
	      &lt;View style={styles.contentContainer}>

	        &lt;View style={styles.search}>
		        &lt;View style={styles.search_cat_wrap}>
		          &lt;Image style={styles.search_cat_ico} source={{uri : 'http://cnt1992.sinaapp.com/static_img/category.png'}} />
		          &lt;Text style={styles.search_cat}>分类&lt;/Text>
		        &lt;/View>
		        &lt;TextInput style={styles.search_input} placeholder="搜索京东商品/店铺" />
		        &lt;View style={styles.search_scan_wrap}>
		          &lt;Image style={styles.search_scan_ico} source={{uri : 'http://cnt1992.sinaapp.com/static_img/category.png'}} />
		          &lt;Text style={styles.search_scan}>扫啊扫&lt;/Text>
		        &lt;/View>
		    &lt;/View>

		    &lt;View style={styles.cat}>
		        &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
			    &lt;View style={styles.cat_item_wrap}>
			        &lt;Image source={{uri: this.props.uri}} style={styles.cat_item} />
			        &lt;Text style={styles.cat_txt}>{this.props.txt}&lt;/Text>
			    &lt;/View>
		    &lt;/View>

		    &lt;View style={styles.fixedbar}>
		      &lt;Text style={[styles.fixedbar_item,styles.fixedbar_item_active]}>首页&lt;/Text>
		      &lt;Text style={styles.fixedbar_item}>分类&lt;/Text>
		      &lt;Text style={styles.fixedbar_item}>发现&lt;/Text>
		      &lt;Text style={styles.fixedbar_item}>购物车&lt;/Text>
		      &lt;Text style={styles.fixedbar_item}>我的&lt;/Text>
		    &lt;/View>
		  &lt;/View>
		);
	}
});
				</code></pre>
			</section>
		
			<section data-transition="slide">
				<p>用组件化思维，将模块剥离成一个组件，将上面代码搜索框抽离出来形成一个组件。</p>
				<pre class="fragment fade-in" data-transition-speed="slow"><code data-trim contenteditable>
	var SearchInput = React.createClass({
	  render : function () {
	    return (
	      &lt;View style={styles.search}>
	        &lt;View style={styles.search_cat_wrap}>
	          &lt;Image style={styles.search_cat_ico} source={{uri : 'http://cnt1992.sinaapp.com/static_img/category.png'}} />
	          &lt;Text style={styles.search_cat}>分类&lt;/Text>
	        &lt;/View>

	        &lt;TextInput style={styles.search_input} placeholder="搜索京东商品/店铺" />

	        &lt;View style={styles.search_scan_wrap}>
	          &lt;Image style={styles.search_scan_ico} source={{uri : 'http://cnt1992.sinaapp.com/static_img/category.png'}} />
	          &lt;Text style={styles.search_scan}>扫啊扫&lt;/Text>
	        &lt;/View>
	      &lt;/View>
	    );
	  },
	});				
				</code></pre>
			</section>
			<section data-transition="slide">
				<p>优化后代码如下：</p>
				<p><i>tips:组件名称首字母必须大写，否则编译会报错</i></p>
				<pre><code>
	var jd = React.createClass({
		render : function () {
			return (
		      &lt;View style={styles.contentContainer}>

		        &lt;SearchInput />

			    &lt;Cat />

			    &lt;FixedBar />
			);
		}
	});				
				</code></pre>
			</section>
		</section>
		<!-- E 组件分离·组件 -->

		<!-- S 组件分离·样式 -->
		<section>
			<section data-transition="slide">
				<h3>组件分离·样式</h3>
				<p>相对web来说，react-native的样式只是css很小很小的一个子集，大概支持50种属性，当初始化项目的时候样式写在最后一部分，与传统css写在页面的前面不同，这样做是为了避免重新加载一次样式。</p>
				<p>但是我们习惯了书写css，所以可以将样式剥离到单独的css文件，利用工具转换成css对象。</p>	
			</section>
			<section data-transition="slide">
				<p>我们可以这样子写css，跟传统css会有一些差别，采用驼峰式风格</p>
				<pre><code data-trim contenteditable>
.loading {
    flex:1;
    alignItems : center;
    justifyContent : center;
}
.loading_img {
    width:16;
    height:16;
}
.flex {
    flex:1;
    flexDirection:row;
}
.bar {
    flex:1;
    height:8;
    backgroundColor:#eef3f6;
}
				</code></pre>
			</section>
		</section>
		<!-- E 组件分离·样式 -->

		<!-- S css-layout·Flex布局 -->
		<section>
			<h3>css-layout·Flex布局</h3>
			<p>纯粹flex布局会使我们编写复杂页面布局困难度加大，定位方式只支持relative、absolute，不支持fixed定位，而且也不支持zIndex，另外属性的写法很繁琐。</p>
			<pre><code data-trim contenteditable>
// 在传统css中我们可以开开心心这样写代码
padding: 10px 5px 5px 15px;
// 但是在react-native中只能这样子写
paddingTop:10;
paddingRight:5;
paddingBottom:5;
paddingLeft:15;
			</code></pre>
		</section>
		<!-- E css-layout·Flex布局 -->

		<!-- S css-layout·图片布局 -->
		<section>
			<h3>css-layout·图片布局</h3>
			<p>在react-native中图片是必须写明大小值的，不然默认宽高都为0，而且不支持"width:100%"这种写法，而我们经常需要自适应的图片，两种做法可以参考：</p>
			<pre><code data-trim contenteditable>
// 1、只写高度，不写宽度，外层容器使用flex布局，配合resizeMode实现自适应
&lt;View style={{flex:1;}}>
	&lt;Image style={{height:164,resizeMode:Image.resizeMode.contain}} source={{uri:'http://img30.360buyimg.com/mobilecms/s480x180_jfs/t976/187/733378075/54266/49f41b33/554c7942N3285091b.jpg'}} />
&lt;/View>
// 2、使用Dimensions获取设备viewport的宽高
var Dimensions = require('Dimensions');
var {width, height} = Dimensions.get('window');
var image = (
	&lt;Image style={{width:width,height:164}} source={{uri:'http://img30.360buyimg.com/mobilecms/s480x180_jfs/t976/187/733378075/54266/49f41b33/554c7942N3285091b.jpg'}} />
);
			</code></pre>
		</section>
		<!-- E css-layout·图片布局 -->

		<!-- S ECMAScript 6新特性 -->
		<section>
			<h3>ECMAScript 6新特性</h3>
			<p>react-native使用了ECMAScript 6的一些新特性，如析构赋值、箭头函数等。</p>
			<pre><code data-trim contenteditable>
var {
  StyleSheet
  Text,
  View,
} = React;	
// 以上代码等同于
var StyleSheet = React.Stylesheet;
var Text = React.Text;
var View = React.View;	

AppRegistry.registerComponent('jd', () => jd);
// 箭头函数基本模式就是：Input => Output,以上代码等同于
function () {
	return jd ;
}
			</code></pre>
		</section>
		<!-- E ECMAScript 6新特性 -->

		<!-- S ListView、ScrollView性能 -->
		<section>
			<h3>ListView、ScrollView性能</h3>
			<p>在github的React Native有一个issue格外让人担忧： ListView renders all rows? </p>
			<img class="fragment fade-in" src="http://cnt1992.sinaapp.com/static_img/scrollview.jpg" alt="react-native ScrollView性能">
		</section>
		<!-- E ListView、ScrollView性能 -->

		<!-- S 总结 -->
		<section>
			<h3>实践总结</h3>
			<ul>
				<li>对web开发人员来说，用自己熟悉的javascript语言就可以开发原生的移动APP，‘一技多用’，目前支持IOS，Android版本预计2015年10月公布。</li>
				<li>flex布局不尽人意，精确性控制没有传统Native布局好，最终布局效果会有偏差。</li>
				<li>性能问题须持续跟进，保持学习。</li>
			</ul>
		</section>
		<!-- E 总结 -->

		<!-- S 感谢 -->
		<section>
			<h2>Thank You!</h2>
		</section>
		<!-- E 感谢 -->


	</div>
</div>





