<!doctype html>  
<html lang="zh-CN">
	<head>
		<meta charset="utf-8">
		<title><%= title %></title>
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		<!--<link href='http://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic' rel='stylesheet' />-->
		<!-- 核心样式 -->
		<link rel="stylesheet" href="/css/reveal.css" media="screen" />

		<!-- 主题样式 -->
		<link rel="stylesheet" href="/css/theme_jdc.css" media="screen" />

		<!-- ico -->
		<link rel="shortcut icon" href="<%= icoURL %>">

		<!-- 代码高亮样式 -->
		<link rel="stylesheet" href="/lib/css/zenburn.css">
	</head>
	<body>
	
		<%- body %>
	
<script src="/lib/js/head.min.js"></script>
<script>
	// Load the main reveal.js script
	head.js( '/js/reveal.js', function() {
		// Parse the query string into a key/value object
		var query = {};

		location.search.replace( /[A-Z0-9]+?=(\w*)/gi, function(a) {
			query[ a.split( '=' ).shift() ] = a.split( '=' ).pop();
		} );

		// Fires when a slide with data-state=customevent is activated
		Reveal.addEventListener( 'customevent', function() {
			console.log( '"customevent" has fired' );
		} );

		// Fires each time a new slide is activated
		Reveal.addEventListener( 'slidechanged', function( event ) {
			// event.previousSlide, event.currentSlide, event.indexh, event.indexv
		} );

		Reveal.initialize({
			// Display controls in the bottom right corner
			controls: false,

			// Display a presentation progress bar
			progress: false,

			// If true; each slide will be pushed to the browser history
			history: true,

			// Loops the presentation, defaults to false
			loop: false,

			// Flags if mouse wheel navigation should be enabled
			mouseWheel: false,

			// Apply a 3D roll to links on hover
			rollingLinks: false,

			slideNumber: false,

			// Transition style
			transition: query.transition || 'default' // default/cube/page/concave/linear(2d)
		});
	});
	
	// Load third party scripts
	head.js( '/lib/js/classList.js' );
	head.js( '/lib/js/highlight.js', function() {
		// Fire off syntax highlighting for potential code samples in the slides
		hljs.initHighlightingOnLoad();
	} );
			
	// map the url to the presentation id
	var pathNameArr = window.location.pathname.split("/");
	if(pathNameArr.length > 1) {
		presentation_id = pathNameArr[1];
	}


	head.js( '/socket.io/socket.io.js' , function() {
		
		// connect
		var socket = io.connect('/');
		
		socket.on('connect', function () {

            // 浏览器关闭发送ppt断开链接指令
            window.onbeforeunload = function( e ){
                socket.emit('ppt_disconnect',{id:presentation_id});
            };

			console.log("PPT端连接成功，发送当前请求");

            var availableRoutes = Reveal.availableRoutes();  // { left:true,right:true,up:true,down:false }
            socket.emit( 'availableRoutes', availableRoutes );

			// on connect send presentation request
			socket.emit('request_presentation', {'id': presentation_id});
			
			socket.on('updatedata', function(data) {
				console.log("接收更新数据: " + JSON.stringify(data) );

                if ( data.id !== presentation_id ){
                    return;
                }

                switch ( data.txt ){
                    case 'left' :
                        Reveal.left();
                        break;
                    case 'right' :
                        Reveal.right();
                        break;
                    case 'up' :
                        Reveal.up();
                        break;
                    case 'down' :
                        Reveal.down();
                        break;
                    case 'next' :
                        Reveal.next();
                        break;
                }

                var availableRoutes = Reveal.availableRoutes();  // { left:true,right:true,up:true,down:false }
                var availableFragments =  Reveal.availableFragments(); // { prev:true,next:true }

                // 合并对象
                for( var i in availableFragments ) {
                    availableRoutes[ i ] = availableFragments[ i ];
                }

                socket.emit( 'availableRoutes', availableRoutes );
			});
		});
	});
	
</script>
	
	
	</body>
</html>

